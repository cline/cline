syntax = "proto3";

package cline;
import "cline/common.proto";
import "cline/state.proto";
import "cline/models.proto";
import "cline/browser.proto";
option java_package = "bot.cline.proto";
option java_multiple_files = true;

message AutoApprovalActions {
  bool read_files = 1;
  bool read_files_externally = 2;
  bool edit_files = 3;
  bool edit_files_externally = 4;
  bool execute_safe_commands = 5;
  bool execute_all_commands = 6;
  bool use_browser = 7;
  bool use_mcp = 8;
}

// Auto approval settings for task execution
message AutoApprovalSettings {
  int32 version = 1;
  bool enabled = 2;
  AutoApprovalActions actions = 3;
  int32 max_requests = 4;
  bool enable_notifications = 5;
  repeated string favorites = 6;
}

service TaskService {
  // Cancels the currently running task
  rpc cancelTask(EmptyRequest) returns (Empty);
  // Clears the current task
  rpc clearTask(EmptyRequest) returns (Empty);
  // Gets the total size of all tasks
  rpc getTotalTasksSize(EmptyRequest) returns (Int64);
  // Deletes multiple tasks with the given IDs
  rpc deleteTasksWithIds(StringArrayRequest) returns (Empty);
  // Creates a new task with the given text and optional images
  rpc newTask(NewTaskRequest) returns (Empty);
  // Shows a task with the specified ID
  rpc showTaskWithId(StringRequest) returns (TaskResponse);
  // Exports a task with the given ID to markdown
  rpc exportTaskWithId(StringRequest) returns (Empty);
  // Toggles the favorite status of a task
  rpc toggleTaskFavorite(TaskFavoriteRequest) returns (Empty);
  // Gets filtered task history
  rpc getTaskHistory(GetTaskHistoryRequest) returns (TaskHistoryArray);
  // Sends a response to a previous ask operation
  rpc askResponse(AskResponseRequest) returns (Empty);
  // Records task feedback (thumbs up/down)
  rpc taskFeedback(StringRequest) returns (Empty);
  // Shows task completion changes diff in a view
  rpc taskCompletionViewChanges(Int64Request) returns (Empty);
  // Executes a quick win task with command and title
  rpc executeQuickWin(ExecuteQuickWinRequest) returns (Empty);
  // Deletes all task history
  rpc deleteAllTaskHistory(EmptyRequest) returns (DeleteAllTaskHistoryCount);
}

// Task-specific settings
message TaskSettings {
   string aws_region = 1;
   bool aws_use_cross_region_inference = 2;
   bool aws_bedrock_use_prompt_cache = 3;
   string aws_bedrock_endpoint = 4;
   string aws_profile = 5;
   string aws_authentication = 6;
   bool aws_use_profile = 7;
   string vertex_project_id = 8;
   string vertex_region = 9;
   string requesty_base_url = 10;
   string open_ai_base_url = 11;
  map<string, string> open_ai_headers = 12;
   string ollama_base_url = 13;
   string ollama_api_options_ctx_num = 14;
   string lm_studio_base_url = 15;
   string lm_studio_max_tokens = 16;
   string anthropic_base_url = 17;
   string gemini_base_url = 18;
   string azure_api_version = 19;
   string open_router_provider_sorting = 20;
   AutoApprovalSettings auto_approval_settings = 21;
   BrowserSettings browser_settings = 24;
   string lite_llm_base_url = 25;
   bool lite_llm_use_prompt_cache = 26;
   int32 fireworks_model_max_completion_tokens = 27;
   int32 fireworks_model_max_tokens = 28;
   string qwen_api_line = 29;
   string moonshot_api_line = 30;
   string zai_api_line = 31;
   string telemetry_setting = 32;
   string asksage_api_url = 33;
   bool plan_act_separate_models_setting = 34;
   bool enable_checkpoints_setting = 35;
   int32 request_timeout_ms = 36;
   int32 shell_integration_timeout = 37;
   string default_terminal_profile = 38;
   int32 terminal_output_line_limit = 39;
   string sap_ai_core_token_url = 40;
   string sap_ai_core_base_url = 41;
   string sap_ai_resource_group = 42;
   bool sap_ai_core_use_orchestration_mode = 43;
   string claude_code_path = 44;
   string qwen_code_oauth_path = 45;
   bool strict_plan_mode_enabled = 46;
   bool yolo_mode_toggled = 47;
   bool use_auto_condense = 48;
   string preferred_language = 49;
   OpenaiReasoningEffort openai_reasoning_effort = 50;
   PlanActMode mode = 51;
   DictationSettings dictation_settings = 52;
   FocusChainSettings focus_chain_settings = 53;
   string custom_prompt = 54;
   string dify_base_url = 55;
   double auto_condense_threshold = 56;
   string oca_base_url = 57;
   ApiProvider plan_mode_api_provider = 58;
   string plan_mode_api_model_id = 59;
   int64 plan_mode_thinking_budget_tokens = 60;
   string plan_mode_reasoning_effort = 61;
   LanguageModelChatSelector plan_mode_vs_code_lm_model_selector = 62;
   bool plan_mode_aws_bedrock_custom_selected = 63;
   string plan_mode_aws_bedrock_custom_model_base_id = 64;
   string plan_mode_open_router_model_id = 65;
   OpenRouterModelInfo plan_mode_open_router_model_info = 66;
   string plan_mode_open_ai_model_id = 67;
   OpenAiCompatibleModelInfo plan_mode_open_ai_model_info = 68;
   string plan_mode_ollama_model_id = 69;
   string plan_mode_lm_studio_model_id = 70;
   string plan_mode_lite_llm_model_id = 71;
   LiteLLMModelInfo plan_mode_lite_llm_model_info = 72;
   string plan_mode_requesty_model_id = 73;
   OpenRouterModelInfo plan_mode_requesty_model_info = 74;
   string plan_mode_together_model_id = 75;
   string plan_mode_fireworks_model_id = 76;
   string plan_mode_sap_ai_core_model_id = 77;
   string plan_mode_sap_ai_core_deployment_id = 78;
   string plan_mode_groq_model_id = 79;
   OpenRouterModelInfo plan_mode_groq_model_info = 80;
   string plan_mode_baseten_model_id = 81;
   OpenRouterModelInfo plan_mode_baseten_model_info = 82;
   string plan_mode_hugging_face_model_id = 83;
   OpenRouterModelInfo plan_mode_hugging_face_model_info = 84;
   string plan_mode_huawei_cloud_maas_model_id = 85;
   OpenRouterModelInfo plan_mode_huawei_cloud_maas_model_info = 86;
   string plan_mode_oca_model_id = 87;
   OcaModelInfo plan_mode_oca_model_info = 88;
   ApiProvider act_mode_api_provider = 89;
   string act_mode_api_model_id = 90;
   int64 act_mode_thinking_budget_tokens = 91;
   string act_mode_reasoning_effort = 92;
   LanguageModelChatSelector act_mode_vs_code_lm_model_selector = 93;
   bool act_mode_aws_bedrock_custom_selected = 94;
   string act_mode_aws_bedrock_custom_model_base_id = 95;
   string act_mode_open_router_model_id = 96;
   OpenRouterModelInfo act_mode_open_router_model_info = 97;
   string act_mode_open_ai_model_id = 98;
   OpenAiCompatibleModelInfo act_mode_open_ai_model_info = 99;
   string act_mode_ollama_model_id = 100;
   string act_mode_lm_studio_model_id = 101;
   string act_mode_lite_llm_model_id = 102;
   LiteLLMModelInfo act_mode_lite_llm_model_info = 103;
   string act_mode_requesty_model_id = 104;
   OpenRouterModelInfo act_mode_requesty_model_info = 105;
   string act_mode_together_model_id = 106;
   string act_mode_fireworks_model_id = 107;
   string act_mode_sap_ai_core_model_id = 108;
   string act_mode_sap_ai_core_deployment_id = 109;
   string act_mode_groq_model_id = 110;
   OpenRouterModelInfo act_mode_groq_model_info = 111;
   string act_mode_baseten_model_id = 112;
   OpenRouterModelInfo act_mode_baseten_model_info = 113;
   string act_mode_hugging_face_model_id = 114;
   OpenRouterModelInfo act_mode_hugging_face_model_info = 115;
   string act_mode_huawei_cloud_maas_model_id = 116;
   OpenRouterModelInfo act_mode_huawei_cloud_maas_model_info = 117;
   string plan_mode_vercel_ai_gateway_model_id = 118;
   OpenRouterModelInfo plan_mode_vercel_ai_gateway_model_info = 119;
   string act_mode_vercel_ai_gateway_model_id = 120;
   OpenRouterModelInfo act_mode_vercel_ai_gateway_model_info = 121;
   string act_mode_oca_model_id = 122;
   OcaModelInfo act_mode_oca_model_info = 123;
}

// Request message for creating a new task
message NewTaskRequest {
  Metadata metadata = 1;
  string text = 2;
  repeated string images = 3;
  repeated string files = 4;
  optional TaskSettings task_settings = 5;
}

// Request message for toggling task favorite status
message TaskFavoriteRequest {
  Metadata metadata = 1;
  string task_id = 2;
  bool is_favorited = 3;
}

// Response for task details
message TaskResponse {
  string id = 1;
  string task = 2;
  int64 ts = 3;
  bool is_favorited = 4;
  int64 size = 5;
  double total_cost = 6;
  int32 tokens_in = 7;
  int32 tokens_out = 8;
  int32 cache_writes = 9;
  int32 cache_reads = 10;
}

// Request for getting task history with filtering
message GetTaskHistoryRequest {
  Metadata metadata = 1;
  bool favorites_only = 2;
  string search_query = 3;
  string sort_by = 4;
  bool current_workspace_only = 5;
}

// Response for task history
message TaskHistoryArray {
  repeated TaskItem tasks = 1;
  int32 total_count = 2;
}

// Task item details for history list
message TaskItem {
  string id = 1;
  string task = 2;
  int64 ts = 3;
  bool is_favorited = 4;
  int64 size = 5;
  double total_cost = 6;
  int32 tokens_in = 7;
  int32 tokens_out = 8;
  int32 cache_writes = 9;
  int32 cache_reads = 10;
}

// Request for ask response operation
message AskResponseRequest {
  Metadata metadata = 1;
  string response_type = 2; 
  string text = 3;
  repeated string images = 4;
  repeated string files = 5;
}

// Request for executing a quick win task
message ExecuteQuickWinRequest {
  Metadata metadata = 1;
  string command = 2;
  string title = 3;
}

// Results returned when deleting all task history
message DeleteAllTaskHistoryCount {
  int32 tasks_deleted = 1;
}
