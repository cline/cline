syntax = "proto3";

package host;
option java_package = "bot.cline.host.proto";
option java_multiple_files = true;

import "cline/common.proto";

// Provides methods for working with workspaces/projects.
service WorkspaceService {
  // Returns a list of the top level directories of the workspace.
  rpc getWorkspacePaths(GetWorkspacePathsRequest) returns (GetWorkspacePathsResponse);

  // Saves an open document if it's open in the editor and has unsaved changes. 
  // Returns true if the document was saved, returns false if the document was not found, or did not
  // need to be saved.
  rpc saveOpenDocumentIfDirty(SaveOpenDocumentIfDirtyRequest) returns (SaveOpenDocumentIfDirtyResponse);

  // Get diagnostics from the workspace.
  rpc getDiagnostics(GetDiagnosticsRequest) returns (GetDiagnosticsResponse);
  // Returns workspace items (files/folders) matching a query for mention autocomplete
  rpc searchWorkspaceItems(SearchWorkspaceItemsRequest) returns (SearchWorkspaceItemsResponse);

  // Makes the problems panel/pane visible in the IDE and focuses it.
  rpc openProblemsPanel(OpenProblemsPanelRequest) returns (OpenProblemsPanelResponse);

  // Opens the IDE file explorer panel and selects a file or directory.
  rpc openInFileExplorerPanel(OpenInFileExplorerPanelRequest) returns (OpenInFileExplorerPanelResponse); 
}

message GetWorkspacePathsRequest {
  // The unique ID for the workspace/project.
  // This is currently optional in vscode. It is required in other environments where cline is running at
  // the application level, and the user can open multiple projects.
  optional string id = 1;
}

message GetWorkspacePathsResponse {
  // The unique ID for the workspace/project.
  optional string id = 1;
  repeated string paths = 2;
}

message SaveOpenDocumentIfDirtyRequest {
  optional string file_path = 2;
}
message SaveOpenDocumentIfDirtyResponse {
  // Returns true if the document was saved. 
  optional bool was_saved = 1;
}

message GetDiagnosticsRequest {
  optional cline.Metadata metadata = 1;
}

message GetDiagnosticsResponse {
  repeated cline.FileDiagnostics file_diagnostics = 1;
}

// Request for host-side workspace search (files/folders) used by mentions autocomplete
message SearchWorkspaceItemsRequest {
  string query = 1;                    // Search query string
  optional int32 limit = 2;            // Optional limit for results (default decided by host)
  // Optional selected type filter
  enum SearchItemType {
    FILE = 0;
    FOLDER = 1;
  }
  optional SearchItemType selected_type = 3;
}

// Response for host-side workspace search
message SearchWorkspaceItemsResponse {
  message SearchItem {
    string path = 1;                    // Workspace-relative path using platform separators
    SearchWorkspaceItemsRequest.SearchItemType type = 2;
    optional string label = 3;          // Optional display label (e.g., basename)
  }
  repeated SearchItem items = 1;
}

message OpenProblemsPanelRequest {}
message OpenProblemsPanelResponse {}

message OpenInFileExplorerPanelRequest {
  string path = 1;
}
message OpenInFileExplorerPanelResponse {}
