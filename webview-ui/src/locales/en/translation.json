{
	"announcement": {
		"newInVersion": "New in version {{version}}",
		"joinOurCommunities": "Join our <DiscordLink>Discord</DiscordLink> or <RedditLink>Reddit</RedditLink> for more updates!"
	},
	"settingsView": {
		"settings": "Settings",
		"done": "Done",
		"language": "Language",
		"customInstructions": "Custom Instructions",
		"customInstructionsPlaceholder": "e.g. \"Run unit tests at the end\", \"Use TypeScript with async/await\", \"Speak in Japanese\"",
		"customInstructionsDescription": "These instructions are added to the end of the system prompt sent with every request.",
		"debug": "Debug",
		"resetState": "Reset State",
		"resetStateDescription": "This will reset all global state and secret storage in the extension.",
		"feedback": "If you have any questions or feedback, feel free to open an issue at"
	},
	"apiOptions": {
		"selectModel": "Select a Model...",
		"model": "Model",
		"apiProvider": "API Provider",
		"enterApiKey": "Enter API Key...",
		"apiKey": "API Key",
		"enterBaseUrl": "Enter Base URL...",
		"baseUrl": "Base URL",
		"optionalBaseUrl": "Base URL (optional)",
		"enterModelId": "Enter Model ID...",
		"modelId": "Model ID",
		"useCustomBaseUrl": "Use custom base URL",
		"apiKeyInfo": "This key is stored locally and only used to make API requests from this extension.",
		"getDefault": "Default: {{defaultValue}}",
		"getApiKeyMessage": "You can get an {{vendor}} API key by signing up here.",
		"getApiVendorKey": "{{vendor}} API Key",
		"getCompatibleVendor": "{{vendor}} Compatible",
		"lmStudioInfo": "LM Studio allows you to run models locally on your computer. For instructions on how to get started, see their <Link href=\"https://lmstudio.ai/docs\">quickstart guide.</Link> You will also need to start LM Studio's <Link href=\"https://lmstudio.ai/docs/basics/server\">local server</Link> feature to use it with this extension. <ErrSpan>(<b>Note:</b> Cline uses complex prompts and works best with Claude models. Less capable models may not work as expected.)</ErrSpan>",
		"ollamaInfo": "Ollama allows you to run models locally on your computer. For instructions on how to get started, see their <Link href=\"https://github.com/ollama/ollama/blob/main/README.md\">quickstart guide.</Link> <ErrorSpan>(<b>Note:</b> Cline uses complex prompts and works best with Claude models. Less capable models may not work as expected.)</ErrorSpan>",
		"azureInfo": "<ErrSpan>(<b>Note:</b> Cline uses complex prompts and works best with Claude models. Less capable models may not work as expected.)</ErrSpan>",
		"setAzureApiVersion": "Set Azure API version",
		"enterGcpProjectId": "Enter Project ID...",
		"gcpProjectId": "Google Cloud Project ID",
		"gcpLinks": "To use Google Cloud Vertex AI, you need to <Link href=\"https://cloud.google.com/vertex-ai/generative-ai/docs/partner-models/use-claude#before_you_begin\"> 1) create a Google Cloud account › enable the Vertex AI API › enable the desired Claude models, </Link><br /> <Link href=\"https://cloud.google.com/docs/authentication/provide-credentials-adc#google-idp\"> 2) install the Google Cloud CLI › configure Application Default Credentials. </Link>",
		"enterAwsAccessKey": "Enter Access Key...",
		"awsAccessKey": "AWS Access Key",
		"enterAwsSecretKey": "Enter Secret Key...",
		"awsSecretKey": "AWS Secret Key",
		"enterAwsSessionToken": "Enter Session Token...",
		"awsSessionToken": "AWS Session Token",
		"getRegion": "{{vendor}} Region",
		"selectRegion": "Select a Region...",
		"useCrossRegionInference": "Use cross-region inference",
		"awsInfo": "Authenticate by either providing the keys above or use the default AWS credential providers, i.e. ~/.aws/credentials or environment variables. These credentials are only used locally to make API requests from this extension.",
		"vscodeLanguageModelsInfo": "The VS Code Language Model API allows you to run models provided by other VS Code extensions (including but not limited to GitHub Copilot). The easiest way to get started is to install the Copilot extension from the VS Marketplace and enabling Claude 3.5 Sonnet.",
		"experimentalFeature": "Note: This is a very experimental integration and may not work as expected.",
		"supportsImages": "Supports images",
		"doesNotSupportImages": "Does not support images",
		"supportsComputerUse": "Supports computer use",
		"doesNotSupportComputerUse": "Does not support computer use",
		"supportsPromptCache": "Supports prompt caching",
		"doesNotSupportPromptCache": "Does not support prompt caching",
		"maxOutput": "Max output",
		"tokens": "tokens",
		"inputPrice": "Input price",
		"millionTokens": "million tokens",
		"cacheWritesPrice": "Cache writes price",
		"cacheReadsPrice": "Cache reads price",
		"outputPrice": "Output price",
		"geminiInfo": "* Free up to {{selectedModelId}} requests per minute. After that, billing depends on prompt size.",
		"pricingDetails": "For more info, see pricing details.",
		"languageModel": "Language Model"
	},
	"welcomeView": {
		"greeting": "Hello! I'm Cline, your AI assistant.",
		"description": "I can do all kinds of tasks thanks to the latest breakthroughs in <ClaudeLink>Claude 3.5 Sonnet's agentic coding capabilities</ClaudeLink> and access to tools that let me create & edit files, explore complex projects, use the browser, and execute terminal commands (with your permission, of course). I can even use MCP to create new tools and extend my own capabilities.",
		"getStarted": "To get started, this extension needs an API provider for Claude 3.5 Sonnet.",
		"letsGo": "Let's go!"
	},
	"chatView": {
		"typeMessage": "Type a message...",
		"typeTask": "Type a task...",
		"whatCanIDoForYou": "What can I do for you?",
		"thanksTo": "Thanks to <ClaudeLink>Claude 3.5 Sonnet's agentic coding capabilities,</ClaudeLink> I can handle complex software development tasks step-by-step. With tools that let me create & edit files, explore complex projects, use the browser, and execute terminal commands (after you grant permission), I can assist you in ways that go beyond code completion or tech support. I can even use MCP to create new tools and extend my own capabilities."
	},
	"chatTextArea": {
		"plan": "Plan",
		"act": "Act"
	},
	"chatRow": {
		"error": "Error",
		"mistakeLimitReached": "Cline is having trouble...",
		"autoApprovalMaxReqReached": "Maximum Requests Reached",
		"command": {
			"ask": "Cline wants to execute this command:",
			"say": "Cline executed this command:"
		},
		"useMcpServer": {
			"ask": "Cline wants to use this {type} on {serverName}:",
			"say": "Cline used this {type} on {serverName}:",
			"tool": "tool",
			"resource": "resource"
		},
		"completionResult": "Task Completed",
		"apiReqCancelled": "API Request Cancelled",
		"apiStreamingFailed": "API Streaming Failed",
		"apiRequest": "API Request",
		"apiRequestFailed": "API Request Failed",
		"apiRequestInProgress": "API Request...",
		"followup": "Cline has a question:",
		"tool": {
			"editedExistingFile": {
				"ask": "Cline wants to edit this file:",
				"say": "Cline is editing this file:"
			},
			"createdNewFile": {
				"ask": "Cline wants to create this file:",
				"say": "Cline created this file:"
			},
			"readExistingFile": {
				"ask": "Cline wants to read this file:",
				"say": "Cline read this file:"
			}
		},
		"apiReqStarted": "API Request Started",
		"userFeedback": "User Feedback",
		"userFeedbackDiff": "User Feedback Diff",
		"diffEditFailed": "Diff Edit Failed",
		"shellIntegrationUnavailable": "Shell Integration Unavailable",
		"mcpServerResponse": "MCP Server Response",
		"planModeResponse": "Plan Mode Response",
		"seeNewChanges": "See new changes",
		"commandRequiresApproval": "The model has determined this command requires explicit approval.",
		"troubleshootingGuide": "It seems like you're having Windows PowerShell issues, please see this <Link>troubleshooting guide</Link>",
		"clineWantsToViewTopLevelFiles": "Cline wants to view the top level files in this directory:",
		"clineViewedTopLevelFiles": "Cline viewed the top level files in this directory:",
		"clineWantsToRecursivelyViewFiles": "Cline wants to recursively view all files in this directory:",
		"clineRecursivelyViewedFiles": "Cline recursively viewed all files in this directory:",
		"clineWantsToViewSourceCodeDefinitions": "Cline wants to view source code definition names used in this directory:",
		"clineViewedSourceCodeDefinitions": "Cline viewed source code definition names used in this directory:",
		"clineWantsToSearchDirectory": "Cline wants to search this directory for {{regex}}:",
		"clineSearchedDirectory": "Cline searched this directory for {{regex}}:",
		"diffEditFailedMessage": "This usually happens when the model uses search patterns that don't match anything in the file. Retrying...",
		"shellIntegrationUnavailableMessage": "Cline won't be able to view the command's output. Please update VSCode (CMD/CTRL + Shift + P → \"Update\") and make sure you're using a supported shell: zsh, bash, fish, or PowerShell (CMD/CTRL + Shift + P → \"Terminal: Select Default Profile\"). Still having trouble?",
		"response": "Response",
		"stillHavingTrouble": "Still having trouble?"
	},
	"autoApproveMenu": {
		"none": "None",
		"autoApprove": "Auto Approve:",
		"autoApproveDescription": "Auto-approve allows Cline to perform the following actions without asking for permission. Please use with caution and only enable if you understand the risks.",
		"autoApproveMaxRequestsDescription": "Cline will automatically make this many API requests before asking for approval to proceed with the task.",
		"enableNotifications": "Enable Notifications",
		"enableNotificationsDescription": "Receive system notifications when Cline requires approval to proceed or when a task is completed."
	},
	"historyPreview": {
		"recentTasks": "Recent Tasks",
		"tokens": "Tokens",
		"cache": "Cache",
		"apiCost": "API Cost",
		"viewAllHistory": "View all history"
	},
	"historyView": {
		"history": "History",
		"done": "Done",
		"fuzzySearchHistory": "Fuzzy search history...",
		"newest": "Newest",
		"oldest": "Oldest",
		"mostExpensive": "Most Expensive",
		"mostTokens": "Most Tokens",
		"mostRelevant": "Most Relevant",
		"tokens": "Tokens:",
		"cache": "Cache:",
		"apiCost": "API Cost:",
		"export": "EXPORT"
	}
}
