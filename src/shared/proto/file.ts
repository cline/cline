// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire"
import { Empty, Metadata, StringRequest } from "./common"

export const protobufPackage = "cline"

/** Request for deleteRuleFile */
export interface DeleteRuleFileRequest {
	metadata?: Metadata | undefined
	rulePath: string
	isGlobal: boolean
}

/** Result for rule file operations with meaningful data only */
export interface RuleFile {
	/** Path to the rule file */
	filePath: string
	/** Filename for display purposes */
	displayName: string
}

function createBaseDeleteRuleFileRequest(): DeleteRuleFileRequest {
	return { metadata: undefined, rulePath: "", isGlobal: false }
}

export const DeleteRuleFileRequest: MessageFns<DeleteRuleFileRequest> = {
	encode(message: DeleteRuleFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.metadata !== undefined) {
			Metadata.encode(message.metadata, writer.uint32(10).fork()).join()
		}
		if (message.rulePath !== "") {
			writer.uint32(18).string(message.rulePath)
		}
		if (message.isGlobal !== false) {
			writer.uint32(24).bool(message.isGlobal)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): DeleteRuleFileRequest {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseDeleteRuleFileRequest()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.metadata = Metadata.decode(reader, reader.uint32())
					continue
				}
				case 2: {
					if (tag !== 18) {
						break
					}

					message.rulePath = reader.string()
					continue
				}
				case 3: {
					if (tag !== 24) {
						break
					}

					message.isGlobal = reader.bool()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): DeleteRuleFileRequest {
		return {
			metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
			rulePath: isSet(object.rulePath) ? globalThis.String(object.rulePath) : "",
			isGlobal: isSet(object.isGlobal) ? globalThis.Boolean(object.isGlobal) : false,
		}
	},

	toJSON(message: DeleteRuleFileRequest): unknown {
		const obj: any = {}
		if (message.metadata !== undefined) {
			obj.metadata = Metadata.toJSON(message.metadata)
		}
		if (message.rulePath !== "") {
			obj.rulePath = message.rulePath
		}
		if (message.isGlobal !== false) {
			obj.isGlobal = message.isGlobal
		}
		return obj
	},

	create<I extends Exact<DeepPartial<DeleteRuleFileRequest>, I>>(base?: I): DeleteRuleFileRequest {
		return DeleteRuleFileRequest.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<DeleteRuleFileRequest>, I>>(object: I): DeleteRuleFileRequest {
		const message = createBaseDeleteRuleFileRequest()
		message.metadata =
			object.metadata !== undefined && object.metadata !== null ? Metadata.fromPartial(object.metadata) : undefined
		message.rulePath = object.rulePath ?? ""
		message.isGlobal = object.isGlobal ?? false
		return message
	},
}

function createBaseRuleFile(): RuleFile {
	return { filePath: "", displayName: "" }
}

export const RuleFile: MessageFns<RuleFile> = {
	encode(message: RuleFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
		if (message.filePath !== "") {
			writer.uint32(10).string(message.filePath)
		}
		if (message.displayName !== "") {
			writer.uint32(18).string(message.displayName)
		}
		return writer
	},

	decode(input: BinaryReader | Uint8Array, length?: number): RuleFile {
		const reader = input instanceof BinaryReader ? input : new BinaryReader(input)
		let end = length === undefined ? reader.len : reader.pos + length
		const message = createBaseRuleFile()
		while (reader.pos < end) {
			const tag = reader.uint32()
			switch (tag >>> 3) {
				case 1: {
					if (tag !== 10) {
						break
					}

					message.filePath = reader.string()
					continue
				}
				case 2: {
					if (tag !== 18) {
						break
					}

					message.displayName = reader.string()
					continue
				}
			}
			if ((tag & 7) === 4 || tag === 0) {
				break
			}
			reader.skip(tag & 7)
		}
		return message
	},

	fromJSON(object: any): RuleFile {
		return {
			filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
			displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
		}
	},

	toJSON(message: RuleFile): unknown {
		const obj: any = {}
		if (message.filePath !== "") {
			obj.filePath = message.filePath
		}
		if (message.displayName !== "") {
			obj.displayName = message.displayName
		}
		return obj
	},

	create<I extends Exact<DeepPartial<RuleFile>, I>>(base?: I): RuleFile {
		return RuleFile.fromPartial(base ?? ({} as any))
	},
	fromPartial<I extends Exact<DeepPartial<RuleFile>, I>>(object: I): RuleFile {
		const message = createBaseRuleFile()
		message.filePath = object.filePath ?? ""
		message.displayName = object.displayName ?? ""
		return message
	},
}

/** Service for file-related operations */
export type FileServiceDefinition = typeof FileServiceDefinition
export const FileServiceDefinition = {
	name: "FileService",
	fullName: "cline.FileService",
	methods: {
		/** Opens a file in the editor */
		openFile: {
			name: "openFile",
			requestType: StringRequest,
			requestStream: false,
			responseType: Empty,
			responseStream: false,
			options: {},
		},
		/** Opens an image in the system viewer */
		openImage: {
			name: "openImage",
			requestType: StringRequest,
			requestStream: false,
			responseType: Empty,
			responseStream: false,
			options: {},
		},
		/** Deletes a rule file from either global or workspace rules directory */
		deleteRuleFile: {
			name: "deleteRuleFile",
			requestType: DeleteRuleFileRequest,
			requestStream: false,
			responseType: RuleFile,
			responseStream: false,
			options: {},
		},
	},
} as const

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined

export type DeepPartial<T> = T extends Builtin
	? T
	: T extends globalThis.Array<infer U>
		? globalThis.Array<DeepPartial<U>>
		: T extends ReadonlyArray<infer U>
			? ReadonlyArray<DeepPartial<U>>
			: T extends {}
				? { [K in keyof T]?: DeepPartial<T[K]> }
				: Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
	? P
	: P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never }

function isSet(value: any): boolean {
	return value !== null && value !== undefined
}

export interface MessageFns<T> {
	encode(message: T, writer?: BinaryWriter): BinaryWriter
	decode(input: BinaryReader | Uint8Array, length?: number): T
	fromJSON(object: any): T
	toJSON(message: T): unknown
	create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
	fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
