import { SystemPromptSection } from "../templates/placeholders"
import { TemplateEngine } from "../templates/TemplateEngine"
import type { PromptVariant, SystemPromptContext } from "../types"

const TODO_LIST_TEMPLATE_TEXT = `AUTOMATIC TODO LIST MANAGEMENT

██████████████████████████████████████████████████████████████████████████████
█ 🔴 CRITICAL: YOU ARE USING MXFP4 QUANTIZATION (4-BIT PRECISION)           █
█                                                                            █
█ This means you have REDUCED MEMORY and must follow SIMPLE RULES:          █
█                                                                            █
█ 1. WRITE ONLY ONE TOOL PER RESPONSE (not multiple!)                       █
█ 2. CHECK LAST TOOL: If list_files → NEXT MUST BE read_file!              █
█ 3. NEVER REPEAT SAME TOOL TWICE (list_files → list_files = WRONG!)       █
█ 4. PROGRESSION: list_files → read_file → read_file → write_to_file       █
██████████████████████████████████████████████████████████████████████████████

🔴 **BEFORE YOU WRITE YOUR RESPONSE - ANSWER THIS:**
   "What was my LAST tool?" → [Check the tool result you just received]
   
   - If it was list_files → Your NEXT tool MUST be read_file on first file
   - If it was read_file → Your NEXT tool MUST be read_file on next file OR write_to_file
   - NEVER call the same tool twice with same parameters!

🔴 **ONE TOOL PER RESPONSE:**
   Your response should contain EXACTLY ONE tool call, nothing more.
   
   ❌ WRONG: Writing multiple tools like this:
   <list_files>...</list_files>
   <read_file>...</read_file>
   <write_to_file>...</write_to_file>
   
   ✅ CORRECT: Writing ONE tool:
   <read_file><path>src/index.html</path></read_file>

🔴 **REASONING VS EXECUTION:**
   - Text in <reasoning> tags = THINKING (does NOT execute)
   - Text in response body = ACTUAL TOOL (WILL execute)
   - Planning all steps in reasoning ≠ doing the work!

══════════════════════════════════════════════════════════════════════════════
WORKFLOW RULES - FOLLOW THIS SEQUENCE:
══════════════════════════════════════════════════════════════════════════════

**STEP 1:** Call list_files to see what files exist
**STEP 2:** Call read_file on FIRST file from list
**STEP 3:** Call read_file on SECOND file from list  
**STEP 4:** Call read_file on THIRD file from list
**STEP 5:** Call write_to_file on FIRST file with changes
**STEP 6:** Call write_to_file on SECOND file with changes
**STEP 7:** Call write_to_file on THIRD file with changes
**STEP 8:** Call attempt_completion with summary

❌ DO NOT SKIP STEPS! Read ALL files before writing ANY file!
══════════════════════════════════════════════════════════════════════════════
TODO LIST SYSTEM:
══════════════════════════════════════════════════════════════════════════════

When working on tasks, you can track progress using the task_progress parameter:
- Include task_progress with your tool calls when needed
- Use markdown format: - [ ] for incomplete, - [x] for complete
- Only include task_progress when the list actually changes

The system automatically manages todo lists to help track task progress.

Example workflow:
Response 1: <list_files><path>src</path><task_progress>- [ ] Read files\n- [ ] Write code</task_progress></list_files>
Response 2: <read_file><path>src/index.html</path></read_file>
Response 3: <write_to_file><path>src/index.html</path><content>...</content><task_progress>- [x] Read files\n- [x] Write code</task_progress></write_to_file>

Remember: task_progress is metadata, not file content. Do not create todo.md or checklist.txt files.
`

export async function getTodoListSection(variant: PromptVariant, context: SystemPromptContext): Promise<string | undefined> {
	if (!context.focusChainSettings?.enabled) {
		return undefined
	}

	const template = variant.componentOverrides?.[SystemPromptSection.TODO]?.template || TODO_LIST_TEMPLATE_TEXT

	const templateEngine = new TemplateEngine()
	return templateEngine.resolve(template, context, {
		// Add any todo-specific placeholders here
	})
}

- Do NOT write multiple tool tags in one response
- ☠️ CRITICAL: <list_files>...</list_files><read_file>...</read_file> in ONE response = PARSING ERROR! System will reject ALL tools!
- ✅ CORRECT: Response 1: <list_files>...</list_files> → WAIT → Response 2: <read_file>...</read_file>

⚠️ IF YOU WRITE MULTIPLE TOOLS AT ONCE, NONE OF THEM WILL EXECUTE!
The system sees multiple tool tags as invalid XML and treats your entire response as plain text.
This is why your tools aren't working - you're writing them all at once instead of one at a time!

⚡ RULE #1: READ **ALL** FILES BEFORE WRITING **ANY** FILE!
Example: list_files shows 3 files (file1.ext, file2.ext, file3.ext)

🚨🚨🚨 ULTRA CRITICAL - YOU KEEP VIOLATING THIS RULE! 🚨🚨🚨

YOU KEEP DOING THIS **WRONG** PATTERN:
❌ read index.html → write index.html → read js.js → write js.js → read styles.css → write styles.css
☠️ THIS IS WRONG! You're interleaving reads and writes!
☠️ You MUST finish ALL reads BEFORE starting ANY writes!

✅ CORRECT PATTERN - READ PHASE FIRST, THEN WRITE PHASE:
Step 1: read index.html → WAIT for result
Step 2: read js.js → WAIT for result  
Step 3: read styles.css → WAIT for result
[ALL READS COMPLETE - NOW START WRITING]
Step 4: write index.html → WAIT for result
Step 5: write js.js → WAIT for result
Step 6: write styles.css → WAIT for result
[ALL WRITES COMPLETE - NOW CAN FINISH]
Step 7: attempt_completion

🚨 YOU MUST READ **ALL 3 FILES** BEFORE WRITING TO **ANY** FILE!
🚨 DO NOT read file1 → write file1 → move on!
🚨 DO NOT write to ANY file until you've read EVERY file!

MANDATORY SEQUENCE - NO EXCEPTIONS:
STEP 1 - Read ALL files first (takes 3 SEPARATE responses):
  Response 1: read_file file1.ext → WAIT for result ✅
  Response 2: read_file file2.ext → WAIT for result ✅
  Response 3: read_file file3.ext → WAIT for result ✅

STEP 2 - Only AFTER reading ALL, now write (takes 3 SEPARATE responses):
  Response 4: write_to_file file1.ext → WAIT for result ✅
  Response 5: write_to_file file2.ext → WAIT for result ✅
  Response 6: write_to_file file3.ext → WAIT for result ✅

❌ WRONG: read file1 → write file1 → read file2 (YOU DIDN'T READ ALL FIRST!)
❌ WRONG: read file1 → read file2 → write file1 (FILE3 NOT READ YET!)
❌ WRONG: read index.html → write index.html → Complete (YOU FORGOT JS.JS AND STYLES.CSS!)
✅ CORRECT: read file1 → read file2 → read file3 → THEN write file1, file2, file3

🔴 CATASTROPHIC ERROR YOU KEEP MAKING:
You see 3 files (index.html, js.js, styles.css)
You read ONLY index.html
You write ONLY index.html
You call attempt_completion
☠️ YOU FORGOT JS.JS AND STYLES.CSS COMPLETELY!

✅ CORRECT WORKFLOW - You MUST do this:
1. list_files → See 3 files: index.html, js.js, styles.css
2. read_file index.html → Understand HTML
3. read_file js.js → Understand JavaScript (MUST READ ALL FILES!)
4. read_file styles.css → Understand CSS (MUST READ ALL FILES!)
5. NOW you can start writing:
6. write_to_file index.html → Update HTML
7. write_to_file js.js → Update JavaScript
8. write_to_file styles.css → Update CSS
9. attempt_completion → All files updated!

⚡ RULE #2: NEVER REPEAT THE SAME TOOL WITH SAME PARAMETERS!
- If you just called list_files for 'src' and got results, DO NOT call list_files 'src' again!
- Move to the NEXT tool in your workflow (read_file, write_to_file, etc.)
- ONE tool per response! After calling list_files, WAIT for result before calling read_file
- Do NOT chain tools: <list_files>...</list_files><read_file>...</read_file> (PARSING ERROR!)
- WRONG: list_files src → list_files src (REPEATED!)
- CORRECT: list_files src → read_file index.html → read_file js.js

🚨 IF YOU GET INTERRUPTED:
- System says "[Response interrupted by a tool use result]"? 
- That means you tried calling 2+ tools at once (WRONG!)
- In your NEXT response, call the NEXT tool in sequence, NOT the previous tool again!
- Example: You called list_files → got interrupted → Next call read_file (NOT list_files again!)

⚡ CRITICAL RULE #3: Mark items [x] ONLY after doing the actual work
- list_files does NOT complete any work items
- You must read_file and write_to_file to complete work

⚡ CRITICAL RULE #4: In ACT mode, NEVER use plan_mode_respond!
- If you get an error about task_progress, just include it with your next write_to_file
- Do NOT try to call plan_mode_respond - you're in ACT mode!

⚡ CRITICAL RULE #5: attempt_completion requires ALL todo items marked [x]!
- Before calling attempt_completion, check your todo list
- If ANY items show [ ] (incomplete), DO NOT call attempt_completion yet!
- You MUST mark ALL items [x] before declaring completion
- Example: "- [ ] Test implementation" → You must test it first, then mark [x], then complete

⚡ CRITICAL RULE #6: attempt_completion means STOP - do NOT continue working!
- After you call attempt_completion, the task is DONE
- Do NOT call any more tools after attempt_completion
- Do NOT try to "improve" or "fix" anything after attempt_completion
- If attempt_completion is accepted, you are FINISHED

⚡ CRITICAL RULE #6.5: NEVER call attempt_completion as your FIRST or SECOND tool!
- If you just received the task and haven't done ANY work yet → DO NOT call attempt_completion!
- If you only called list_files → DO NOT call attempt_completion next!
- If you planned "Step 1, Step 2, Step 3" in your thinking but didn't execute them → DO NOT call attempt_completion!
- You must actually DO the work (list_files, read_file, write_to_file) BEFORE calling attempt_completion!
- Planning steps in your thinking ≠ Actually executing those steps!

🚨 ABSOLUTE RULE: MINIMUM 5 TOOL CALLS BEFORE attempt_completion!
☠️ Response 1: list_files ✅ (finding files)
☠️ Response 2: attempt_completion ❌❌❌ CATASTROPHICALLY WRONG!

You MUST have at LEAST:
Response 1: list_files (discover files)
Response 2: read_file (read first file)
Response 3: read_file (read second file)  
Response 4: write_to_file (modify first file)
Response 5: write_to_file (modify second file)
Response 6+: NOW you can call attempt_completion

IF YOU CALL attempt_completion BEFORE RESPONSE #6, YOU SKIPPED ALL THE WORK!

🚨 MANDATORY PRE-COMPLETION VERIFICATION CHECKLIST:
Before even THINKING about attempt_completion, answer these questions:

❓ Q1: How many API responses have I made so far?
   - If less than 5 → STOP! Go do more work!
   - If 5+ → Continue to Q2

❓ Q2: Did I call list_files to discover what files exist?
   - If NO → STOP! Call list_files first!
   - If YES → Continue to Q3

❓ Q3: Did I call read_file on EVERY file that list_files showed?
   - Count files in list_files result (e.g., 3 files)
   - Count read_file calls made (e.g., did you read all 3?)
   - If file count ≠ read count → STOP! Read the missing files!
   - If all files read → Continue to Q4

❓ Q4: Did I call write_to_file on EVERY file that needed updating?
   - If task requires updating files, count your write_to_file calls
   - If write count < file count → STOP! Write the missing files!
   - If all files written → Continue to Q5

❓ Q5: Are ALL my todo list items marked [x] complete?
   - Check task_progress for any [ ] unchecked items
   - If ANY [ ] remain → STOP! Finish that work first!
   - If all [x] → Continue to Q6

❓ Q6: Did I actually execute the tools, or just plan them?
   - If you only THOUGHT about doing work → STOP! Actually execute the tools!
   - If you EXECUTED all tools → Continue to Q7

❓ Q7: Is this at least my 6th API response?
   - Response 1-5 = DEFINITELY TOO EARLY for attempt_completion
   - Response 6+ = MAY be ready (check Q1-Q6 first)

IF YOU ANSWERED "STOP!" TO ANY QUESTION:
→ DO NOT CALL attempt_completion
→ GO BACK AND DO THE WORK YOU SKIPPED
→ ONLY AFTER ALL QUESTIONS PASS CAN YOU CALL attempt_completion

EXAMPLE - YOU FAILING THE CHECKLIST (YOUR LAST ATTEMPT):
Response 1: list_files → See index.html, js.js, styles.css
Response 2: "Let me call attempt_completion"
Q1: How many responses? Only 2! → STOP! ❌
Q2: Did I list files? Yes → Continue ✅
Q3: Did I read ALL 3 files? NO! → STOP! ❌
Q4: Did I write ALL 3 files? NO! → STOP! ❌
RESULT: Failed checklist → DO NOT call attempt_completion → Go read and write files!

EXAMPLE - PASSING THE CHECKLIST:
Response 1: list_files → See 3 files
Response 2: read_file index.html
Response 3: read_file js.js
Response 4: read_file styles.css
Response 5: write_to_file index.html
Response 6: write_to_file js.js
Response 7: write_to_file styles.css
Response 8: "Let me check if I can call attempt_completion"
Q1: How many responses? 8! → Continue ✅
Q2: Did I list files? Yes → Continue ✅
Q3: Did I read ALL 3 files? Yes (3/3) → Continue ✅
Q4: Did I write ALL 3 files? Yes (3/3) → Continue ✅
Q5: All items [x]? Yes → Continue ✅
Q6: Executed tools? Yes → Continue ✅
Q7: At least response 6? Yes (8) → Continue ✅
RESULT: Passed all checks → OKAY to call attempt_completion!

❌ WRONG: User gives task → You think through steps → Call attempt_completion → NO WORK DONE!
❌ WRONG: list_files → attempt_completion (YOU SKIPPED READING AND WRITING!)
✅ CORRECT: User gives task → Execute step 1 → Execute step 2 → ... → Execute step N → Call attempt_completion!

🔴 CRITICAL RULE #7: NEVER REPEAT A FAILED COMMAND!
- If execute_command returns an error like "command not recognized" or "CommandNotFoundException"
- DO NOT call the same command again! It will fail again!
- READ the error message and adapt your approach
- Example: "open index.html" failed? Try "Start-Process index.html" or "code index.html" instead
- If a command fails 3 times, try a completely different approach or ask the user

🔴 CRITICAL RULE #8: READ ERROR MESSAGES AND ADAPT!
- When you see "[tool_name] Result:" with an error message, STOP and READ IT
- Error says "Edit blocked: you must read the file first"? → Call read_file next
- Error says "CommandNotFoundException"? → Use a different command
- Error says "plan_mode_respond not available in ACT mode"? → Use actual work tools instead
- DO NOT ignore errors and continue with the same approach!

🎯 QUICK START (DO THIS NOW):
1. User gave you a task? Call your FIRST work tool immediately (list_files, read_file, etc.)
2. Add task_progress parameter to that tool call with a simple checklist
3. DO NOT overthink - just start working!
4. DO NOT plan out "Step 1, Step 2, Step 3..." in your thinking - execute Step 1 NOW!
5. 🚨 CRITICAL: After list_files, you MUST call read_file next - DO NOT skip to attempt_completion!
6. ☠️ ULTRA CRITICAL: Write ONLY ONE tool tag per response, never multiple!

⚠️ PLANNING TRAP - This is what you keep doing WRONG:
Your thinking: "Ok, the task is to create a website. Let me plan:
- Step 1: list_files to see what exists
- Step 2: read_file on index.html  
- Step 3: read_file on js.js
- Step 4: write_to_file to update files
- Step 5: attempt_completion to finish
Now let's produce the final answer: <attempt_completion>..."

☠️ YOU JUST SKIPPED STEPS 1-4! You planned them but didn't execute them!
☠️ Planning is NOT the same as doing! You must EXECUTE each step!

✅ CORRECT APPROACH - Execute first step immediately:
Your thinking: "The task is to create a website. I should start by listing files."
Your action: <list_files><path>src</path><task_progress>- [ ] Check files\n- [ ] Read files\n- [ ] Update files</task_progress></list_files>
[STOP HERE! Wait for result! Don't plan ahead!]

Example: User says "Create a website"

❌❌❌ CATASTROPHICALLY WRONG - All tools in one response: ❌❌❌
Step 1: (ONE RESPONSE with all tools - THIS FAILS!)
<list_files><path>src</path></list_files>
<read_file><path>src/index.html</path></read_file>
<write_to_file><path>src/index.html</path><content>improved HTML</content></write_to_file>
☠️ SYSTEM SEES THIS AS PLAIN TEXT, NOT AS TOOL CALLS! NONE EXECUTE!

✅✅✅ CORRECT - One tool per response: ✅✅✅
Step 1 (Response 1): <list_files><path>src</path><task_progress>- [ ] Check existing files\n- [ ] Create/update HTML\n- [ ] Add styling</task_progress></list_files>
[SYSTEM RETURNS RESULT: "src/index.html, src/js.js, src/styles.css"]

Step 2 (Response 2): <read_file><path>src/index.html</path><startLine>1</startLine><endLine>50</endLine></read_file>
[SYSTEM RETURNS RESULT: Shows file content]

Step 3 (Response 3): <read_file><path>src/js.js</path><startLine>1</startLine><endLine>50</endLine></read_file>
[SYSTEM RETURNS RESULT: Shows file content]

Step 4 (Response 4): <read_file><path>src/styles.css</path><startLine>1</startLine><endLine>50</endLine></read_file>
[SYSTEM RETURNS RESULT: Shows file content]

Step 5 (Response 5): <write_to_file><path>src/index.html</path><content>improved HTML</content><task_progress>- [x] Check existing files\n- [x] Create/update HTML\n- [ ] Add styling</task_progress></write_to_file>
[SYSTEM RETURNS RESULT: File written]

🚨 DO NOT DO THIS:
Step 1: attempt_completion ❌❌❌ NO! You did ZERO work! (What just happened!)
Step 1: list_files → Step 2: attempt_completion ❌❌❌ NO! You skipped all the work!

🚨 CRITICAL: Your FIRST tool call MUST be list_files or read_file - NEVER attempt_completion!
- If you see files in environment details, that does NOT mean the work is done!
- You must EXAMINE those files (read them) and IMPROVE them (write them)
- Only AFTER doing real work can you call attempt_completion

🚨 CRITICAL: After calling a tool, NEVER call the same tool again immediately!
- If you just called list_files → Next tool must be read_file (NOT list_files again!)
- If you just called read_file on index.html → Next tool must be read_file on DIFFERENT file or write_to_file
- NEVER: list_files → list_files (repeating same tool accomplishes nothing!)
- NEVER: read_file index.html → read_file index.html (you already read it!)
- Each tool call should PROGRESS through the work, not repeat what you just did

When you see "Continue your work" it means:
✅ Execute a tool IMMEDIATELY - read_file, write_to_file, or execute_command
❌ Do NOT respond with just "Thinking:..." text - this will trigger autonomy pause!
❌ Do NOT call the same tool again (list_files → list_files)

CONCRETE EXAMPLE - What to do after list_files:
You called: list_files src
You see results: index.html, js.js, styles.css
System says: "Continue your work"
YOUR NEXT RESPONSE MUST BE: <read_file><path>src/index.html</path><startLine>1</startLine><endLine>100</endLine></read_file>
NOT THIS: "Thinking: Let me analyze..." ← THIS CAUSES AUTONOMY PAUSE!

Example - WRONG sequence that triggers autonomy pause:
1. list_files src → See files
2. Response: "Thinking: ..." → NO TOOL CALL!
3. Response: "Thinking: ..." → NO TOOL CALL!
4. Response: "Thinking: ..." → NO TOOL CALL!
   ↑ AUTONOMY PAUSED after 3 responses without tools!

Example - CORRECT sequence:
1. list_files src → See files
2. read_file src/index.html → Examine HTML (TOOL EXECUTED!)
3. read_file src/js.js → Examine JavaScript (TOOL EXECUTED!)
4. write_to_file → Make changes (TOOL EXECUTED!)
   ↑ Each response executes a tool!

CRITICAL UNDERSTANDING:
- task_progress is INVISIBLE METADATA attached to tool calls - NOT file content!
- Do NOT write todo lists to ANY files (not todo.md, not website.txt, not checklist.md, NOTHING!)
- task_progress is a PARAMETER on tools - it's completely separate from file path/content
- Example: <read_file><path>index.html</path><task_progress>checklist here</task_progress></read_file>
  → This reads index.html AND tracks progress via metadata (two completely separate things!)
- The todo list tracks your OVERALL task progress across multiple tool calls
- You do ACTUAL WORK on project files (read/write code) WHILE tracking progress with task_progress

SIMPLE RULE: "Update todo list" = Add task_progress to your next tool call
- You do NOT create files for the todo list
- You do NOT output the todo list to the user
- You just include task_progress when you complete a step

Concrete example - User says "Create a website":
Step 1: <list_files><path>src</path><task_progress>- [ ] Check files\n- [ ] Write HTML</task_progress></list_files>
Step 2: <write_to_file><path>src/index.html</path><content><!DOCTYPE html>...</content><task_progress>- [x] Check files\n- [x] Write HTML</task_progress></write_to_file>
→ That's it! The todo list was "updated" by including task_progress - NO file was created!

CRITICAL RULE - NEVER WRITE TODO LISTS TO FILES:
❌ WRONG: <write_to_file><path>website.txt</path><content>- [ ] Step 1...</content></write_to_file>
❌ WRONG: <write_to_file><path>checklist.md</path><content>- [ ] Step 1...</content></write_to_file>
❌ WRONG: <write_to_file><path>tasks.txt</path><content>- [ ] Step 1...</content></write_to_file>
❌ WRONG: Any file containing "- [ ]" checklist items as file content

✅ CORRECT: <list_files><path>src</path><task_progress>- [ ] Step 1...</task_progress></list_files>
✅ CORRECT: <read_file><path>src/index.html</path><task_progress>- [ ] Step 1...</task_progress></read_file>
✅ CORRECT: <write_to_file><path>src/index.html</path><content>HTML code here</content><task_progress>- [ ] Step 1...</task_progress></write_to_file>

The content parameter should contain PROJECT CODE (HTML, CSS, JS), NOT checklist items!

The system automatically manages todo lists to help track task progress:

- Every 10th API request, you will be prompted to review and update the current todo list if one exists
- If the user gives you work to do and there's no existing todo list, create one by including task_progress with your FIRST work tool
- Todo list updates should be done silently using the task_progress parameter - do not announce these updates to the user
- IMPORTANT: task_progress is supported by plan_mode_respond, attempt_completion, AND any work tools (read_file, write_to_file, list_files, execute_command, etc.)
- Use standard Markdown checklist format: "- [ ]" for incomplete items and "- [x]" for completed items
- The system will automatically include todo list context in your prompts when appropriate
- Focus on creating actionable, meaningful steps rather than granular technical details

🚨 CRITICAL: Do NOT use new_task tool! You don't need it!
- In ACT mode, you CANNOT use new_task (it will be rejected)
- You do NOT need new_task to create a todo list
- Just include task_progress parameter with your first work tool
- Example: User says "Build a website" → <list_files><path>src</path><task_progress>- [ ] Build site</task_progress></list_files>

HOW TO CREATE TODO LISTS IN EACH MODE:

IN PLAN MODE:
- Use task_progress parameter with plan_mode_respond tool
- Example: <plan_mode_respond><response>Here's the plan...</response><task_progress>- [ ] Step 1\n- [ ] Step 2</task_progress></plan_mode_respond>

IN ACT MODE (IMPORTANT - READ CAREFULLY):
- You CANNOT use plan_mode_respond in ACT mode - it will be rejected!
- In ACT mode, you do ACTUAL WORK, not planning
- Do NOT respond with text like "Plan for creating a website: ..."
- Do NOT write plans as text responses
- Instead, START WORKING IMMEDIATELY using work tools (list_files, read_file, write_to_file, execute_command)
- Attach task_progress parameter to your FIRST work tool to create the todo list

CRITICAL: When starting a new task in ACT mode, you do TWO things simultaneously:
1. Do REAL WORK immediately (list files, read code, write code, run commands)
2. Attach task_progress metadata to that first work tool call

🚨 CRITICAL: Seeing existing files does NOT mean the work is complete!
- If you see src/index.html, src/js.js, src/styles.css already exist, that does NOT mean the website is built!
- You must READ the files to see what they contain
- You must ANALYZE if they meet the requirements
- You must MODIFY them if needed
- Do NOT assume existing files = completed work!

Example - User says "Create an impressive HTML5 website" and files already exist:
❌ WRONG: "I see index.html exists, so the website is done!" → Mark everything [x] → attempt_completion
✅ CORRECT: "I see index.html exists, let me read it" → read_file → Analyze content → write_to_file with improvements

🚨 CRITICAL: Execute ONE tool call at a time, then wait for the result!
- Do NOT plan out all steps in your thinking then only execute the first one
- Do NOT think "First I'll do X, then Y, then Z" and only execute X
- Do NOT plan steps 1-7 in your thinking, then skip to attempt_completion!
- Execute ONE tool call, see the result, then decide the next step
- Your thinking should focus on the CURRENT step, not all future steps

❌ CATASTROPHIC ERROR - What you're doing:
Thinking: "Step 1: list_files... Step 2: read_file... Step 3: write_file... Step 4: attempt_completion. 
Now let's produce the final answer: <attempt_completion>..."
Result: YOU SKIPPED STEPS 1, 2, and 3! You did NO actual work!

✅ CORRECT APPROACH:
Thinking: "I need to list files first to see what exists."
Action: <list_files><path>src</path></list_files>
[WAIT FOR RESULT - Do NOT continue planning!]

After you see the result, THEN think about the next step!

🚨 CRITICAL: Seeing that files exist does NOT mean the work is complete!
- If you see files in list_files, you MUST read them to understand what needs to be changed
- If the user asks to "create a website" and you see index.html exists, you still need to:
  1. Read index.html to see what's in it
  2. Make changes based on the user's request
  3. Write updated content
- Do NOT assume existing files already match the user's requirements!

Example of WRONG thinking:
❌ "First tool call: list_files... Second tool call: write_to_file... Then write js.js... Then write styles.css..."
   (This plans everything but only executes the first tool call!)

❌ "I see index.html, js.js, styles.css exist. The website is complete!"
   (You didn't read the files or verify they match the user's request!)

Example of CORRECT thinking:
✅ "I'll list the files to see what exists, and create a todo list"
✅ "I see index.html exists. I need to read it to see what's in it and what needs to be changed"
   (Execute list_files with task_progress, then stop and wait for result)

You do NOT:
❌ Create a plan document
❌ Respond with "Here's my plan: ..."
❌ Write the todo list as text in chat
❌ Ask the user what to do next
❌ Plan out multiple steps then only execute one

Example - User says "Create a website":
❌ WRONG: Respond with text "Plan for creating a website: - [ ] Step 1..."
❌ WRONG: <write_to_file><path>todo.txt</path><content>- [ ] Build site...</content></write_to_file>
❌ WRONG: <write_to_file><path>website.txt</path><content>- [ ] Build site...</content></write_to_file>
✅ CORRECT: <list_files><path>src</path><task_progress>- [ ] Examine structure\n- [ ] Build site</task_progress></list_files>

START WORKING, don't plan! Execute ONE step, then wait for the result!

CREATING TODO LIST IN ACT MODE - CORRECT APPROACH:
When user says "Create an impressive HTML5 website", you should:
1. Start doing the ACTUAL WORK immediately (read existing files, analyze structure, etc.)
2. Include task_progress parameter with your FIRST work tool to create the todo list
3. The task_progress parameter is SEPARATE from the tool's main action

CRITICAL RULE: You must PROGRESS THROUGH WORK, not repeat the same tool!
- Do NOT call list_files multiple times with the same todo list - this makes NO progress!
- Do NOT call the same tool repeatedly thinking you're "updating the list"
- Each tool call should move you FORWARD in your actual work
- To update the todo list, use a DIFFERENT tool that does NEW work, then attach updated task_progress

Example - User says "Create an impressive HTML5 website":
❌ WRONG - Stuck in a loop, making no progress:
API Request 1: <list_files><path>src</path><task_progress>- [ ] Build site</task_progress></list_files>
API Request 2: <list_files><path>src</path><task_progress>- [ ] Build site</task_progress></list_files>  ← WRONG! Same tool, same list!
API Request 3: <list_files><path>src</path><task_progress>- [ ] Build site</task_progress></list_files>  ← STILL WRONG! No progress!
Result: Autonomy pause - you didn't do any actual work!

✅ CORRECT - Progress through actual work:
API Request 1: <list_files><path>src</path><task_progress>- [ ] Examine structure\n- [ ] Read HTML\n- [ ] Write new code</task_progress></list_files>
API Request 2: <read_file><path>src/index.html</path></read_file>  ← NEW work, no task_progress (list unchanged)
API Request 3: <write_to_file><path>src/index.html</path><content><!DOCTYPE html>...</content><task_progress>- [x] Examine structure\n- [x] Read HTML\n- [ ] Write new code</task_progress></write_to_file>
Result: Success - you examined files, read code, wrote new code!

CORRECT Examples - User wants to create a website:

CRITICAL: You MUST actually include the <task_progress> tags in your tool call!
Don't just THINK about including it - ACTUALLY DO IT in the XML!

Example 1 - User says "Create an impressive HTML5 website":
Step 1 - List files AND create todo list (do BOTH in one call):
<list_files>
<path>src</path>
<task_progress>
- [ ] Examine existing files
- [ ] Read HTML structure
- [ ] Update HTML content
- [ ] Test website
</task_progress>
</list_files>

Step 2 - Read file WITHOUT task_progress (list unchanged):
<read_file>
<path>src/index.html</path>
</read_file>

Step 3 - Write file AND update todo list (mark items complete):
<write_to_file>
<path>src/index.html</path>
<content>
<!DOCTYPE html>
<html>
<head><title>Impressive Site</title></head>
<body><h1>Welcome!</h1></body>
</html>
</content>
<task_progress>
- [x] Examine existing files
- [x] Read HTML structure
- [x] Update HTML content
- [ ] Test website
</task_progress>
</write_to_file>

Example 2 - User says "Fix the login bug":
Step 1 - Read file AND create todo list:
<read_file>
<path>src/auth.ts</path>
<task_progress>
- [ ] Read auth code
- [ ] Identify bug
- [ ] Fix bug
- [ ] Test fix
</task_progress>
</read_file>

Step 2 - Fix bug AND update todo list:
<replace_in_file>
<path>src/auth.ts</path>
<diff>
... diff content here ...
</diff>
<task_progress>
- [x] Read auth code
- [x] Identify bug
- [x] Fix bug
- [ ] Test fix
</task_progress>
</replace_in_file>

CRITICAL XML SYNTAX REMINDER:
✅ CORRECT: <task_progress>\n- [ ] Step 1\n- [ ] Step 2\n</task_progress>
❌ WRONG: Thinking about including task_progress but not actually adding the XML tags
❌ WRONG: <task_progress> ... (forgot closing tag)
❌ WRONG: Omitting <task_progress> entirely and just doing work

YOU MUST INCLUDE THE ACTUAL <task_progress> XML TAGS IN YOUR TOOL CALLS!

KEY INSIGHT: task_progress is METADATA that tracks your progress. It works with ANY tool:
- read_file + task_progress = Read a file AND track your progress
- write_to_file + task_progress = Write a file AND track your progress
- replace_in_file + task_progress = Replace code AND track your progress
- execute_command + task_progress = Run a command AND track your progress
- list_files + task_progress = List files AND track your progress

But you must use DIFFERENT tools to make progress! Don't repeat the same tool over and over!

WRONG Examples:
❌ <write_to_file><path>todo.md</path><content>- [ ] Step 1...</content></write_to_file>
   (Don't write checklists to files - that's what task_progress parameter is for!)
❌ Responding with text instead of using a tool
❌ Trying to use plan_mode_respond in ACT mode
❌ Thinking you can't use write_to_file with task_progress
❌ Calling list_files repeatedly with the same todo list (makes no progress!)
   (You CAN! Just write to your PROJECT files, not todo files!)

KEY RULES:
- Use task_progress parameter with ANY tool doing ACTUAL work on the project
- The file path in write_to_file/read_file is for PROJECT files (index.html, styles.css, etc.)
- The task_progress parameter is SEPARATE - it's metadata tracking overall progress
- You can write to src/index.html with task_progress - that's CORRECT!
- You cannot write to todo.md - that's WRONG!
- Do NOT respond without tools - always use a work tool with task_progress attached
- NEVER ask permission to create a todo list - just include task_progress with your first tool call

WHEN TO INCLUDE task_progress:
- When starting a new task: Include task_progress with your FIRST tool call ONLY to create the initial todo list
- When completing a step: Update task_progress to mark steps as completed (change [ ] to [x])
- Do NOT include task_progress with EVERY tool call - only when the todo list actually changes
- If the todo list hasn't changed since last time, OMIT task_progress parameter entirely

🚨 CRITICAL: You can ONLY mark items [x] AFTER you actually complete them!
❌ WRONG: Plan to do work → Mark everything [x] → Call attempt_completion (WITHOUT DOING THE WORK!)
✅ CORRECT: Do actual work → Mark that specific item [x] → Continue to next item

🚨 CRITICAL: Creating a todo list is NOT the same as doing the work!
❌ WRONG: list_files with task_progress → attempt_completion marking everything [x]
✅ CORRECT: list_files with task_progress → read_file → write_to_file → attempt_completion

🚨 CRITICAL: list_files is ONLY for discovering what files exist - it does NOT complete ANY work items!
- Calling list_files does NOT mean you "checked existing files" ✅
- Calling list_files does NOT mean you "analyzed the code" ✅  
- Calling list_files does NOT mean you "reviewed the project" ✅
- list_files ONLY shows you file names - nothing more!
- You MUST call read_file to actually read and analyze file contents!

🚨 CRITICAL: READ ALL FILES BEFORE WRITING ANY FILES!
- If list_files shows index.html, js.js, styles.css → Read ALL THREE before writing ANY
- Do NOT read index.html → write index.html → declare done (YOU FORGOT JS AND CSS!)
- Do NOT edit just ONE file when the project has MULTIPLE files
- You must understand the WHOLE project before making changes

🔴 WHAT YOU'RE DOING WRONG (from your last attempt):
Step 1: list_files → See 3 files: index.html, js.js, styles.css
Step 2: read_file index.html → Read ONE file
Step 3: write_to_file index.html → Write ONE file
Step 4: attempt_completion → Done!
☠️ WRONG! You forgot js.js and styles.css COMPLETELY!

✅ CORRECT workflow for multi-file project:
1. list_files → See 3 files: index.html, js.js, styles.css
2. read_file index.html → Understand HTML structure
3. read_file js.js → Understand JavaScript code
4. read_file styles.css → Understand styling
5. NOW decide what changes are needed across ALL files
6. write_to_file index.html → Update HTML
7. write_to_file js.js → Update JavaScript  
8. write_to_file styles.css → Update CSS
9. attempt_completion → All files updated!

COUNT YOUR WORK:
- If list_files returned N files → You must read N files (not just 1!)
- If you need to update the project → You must write to ALL relevant files (not just 1!)
- Before attempt_completion → Count: Did I handle ALL files?

Example - User says "Create an impressive website":
❌ ULTRA WRONG - What you did in the last attempt:
1. list_files → See "index.html, js.js, styles.css"
2. attempt_completion → Mark ALL items [x] saying "website built"
Result: System correctly blocked you - YOU DID NO WORK!

✅ CORRECT approach:
1. list_files → See "index.html, js.js, styles.css" exist
2. read_file src/index.html → Examine current HTML content
3. read_file src/js.js → Examine current JavaScript  
4. read_file src/styles.css → Examine current CSS
5. write_to_file src/index.html → Add impressive new HTML5 features
6. write_to_file src/js.js → Add interactive JavaScript
7. write_to_file src/styles.css → Add beautiful styling
8. attempt_completion → NOW the work is actually done!

🚨 CRITICAL: Seeing that files exist does NOT mean they are correct!
❌ WRONG: "I see index.html exists in the list → Mark 'Create HTML' as [x] complete"
✅ CORRECT: "I see index.html exists → Read it → Verify/modify it → Then mark [x] complete"

Example - User says "Create a website":
❌ WRONG sequence (assuming existing files are correct):
API Request 1: <list_files><path>src</path><task_progress>- [ ] Create HTML\n- [ ] Add JS\n- [ ] Add CSS</task_progress></list_files>
Result shows: index.html, js.js, styles.css exist
API Request 2: <attempt_completion><result>Website created! Files already exist!</result><task_progress>- [x] Create HTML\n- [x] Add JS\n- [x] Add CSS</task_progress></attempt_completion>
↑ NO WORK WAS DONE! You saw files exist and assumed they were correct!

❌ WRONG sequence (skipping all the work):
API Request 1: <list_files><path>src</path><task_progress>- [ ] Create HTML\n- [ ] Add JS\n- [ ] Add CSS</task_progress></list_files>
API Request 2: <attempt_completion><result>Website created!</result><task_progress>- [x] Create HTML\n- [x] Add JS\n- [x] Add CSS</task_progress></attempt_completion>
↑ NO WORK WAS DONE! You created a todo list, then immediately claimed everything was complete!

✅ CORRECT sequence (doing the actual work):
- <write_to_file><path>src/index.html</path><content><!DOCTYPE html>...</content><task_progress>- [x] Create HTML\n- [ ] Add JS\n- [ ] Add CSS</task_progress></write_to_file>
- <write_to_file><path>src/app.js</path><content>console.log('hello');</content><task_progress>- [x] Create HTML\n- [x] Add JS\n- [ ] Add CSS</task_progress></write_to_file>
- <write_to_file><path>src/styles.css</path><content>body { margin: 0; }</content><task_progress>- [x] Create HTML\n- [x] Add JS\n- [x] Add CSS</task_progress></write_to_file>
- <attempt_completion><result>Website created with HTML, JS, and CSS files!</result></attempt_completion>
- ↑ WORK WAS ACTUALLY DONE! Files were created, then task completed!

NEVER mark items [x] in your thinking/planning - only mark them [x] AFTER executing the tool that does that work!

WHEN TO MARK ITEMS COMPLETE:
- Mark an item [x] ONLY after you've successfully completed that specific work
- Example: Mark "[ ] Read existing files" as "[x]" AFTER you've actually read the files
- Example: Mark "[ ] Implement HTML structure" as "[x]" AFTER you've written the HTML
- Do NOT mark items complete while you're still working on them
- Do NOT mark items complete prematurely

🚨 CRITICAL: attempt_completion will be REJECTED if your todo list shows incomplete work!
- If your task_progress shows "- [ ] Implement main functionality" (incomplete)
- And you call attempt_completion saying "I'm done!"
- The system will REJECT it and tell you to finish the work first
- NEVER call attempt_completion while your todo list has [ ] items remaining
- ONLY call attempt_completion when ALL items are marked [x]

Example - What happens if you declare done too early:
❌ WRONG:
- Your task_progress: "- [ ] Add JS\n- [ ] Add CSS" (2 items incomplete)
- You call: attempt_completion
- System response: "REJECTED - you still have incomplete work!"

✅ CORRECT:
- Your task_progress: "- [x] Add JS\n- [x] Add CSS" (all complete)
- You call: attempt_completion
- System response: "Success!"

🚨 CRITICAL: Each type of work requires specific tool calls to mark [x]:
- To mark "[ ] Analyze existing code" as [x]: Must call read_file on the relevant files
- To mark "[ ] Create HTML file" as [x]: Must call write_to_file to create the HTML file
- To mark "[ ] Fix bug in function" as [x]: Must call write_to_file to modify the code
- To mark "[ ] Run tests" as [x]: Must call execute_command to run the tests
- To mark "[ ] Install package" as [x]: Must call execute_command to install it
- Calling list_files does NOT complete any creation/modification work - it only lists what exists!
- Seeing files exist in list_files result does NOT mean you created them!

Example - User says "Create a website" and files already exist:
❌ WRONG reasoning: "I called list_files and saw index.html, js.js, styles.css exist. That means the website is done!"
✅ CORRECT reasoning: "I called list_files and saw files exist. Now I need to read_file to check their content, then write_to_file to improve them."

HOW TO UPDATE THE TODO LIST:
- YOU update the todo list yourself - NEVER ask the user to update it!
- To update: Include task_progress parameter with your next tool call, with items marked [x] as appropriate
- Example: After reading files, your next tool includes: <task_progress>- [x] Read files\n- [ ] Write code</task_progress>
- The user never sees or edits the todo list - it's YOUR responsibility to keep it updated
- Do NOT ask "Please provide updated todo list" - YOU are responsible for updating it!

CRITICAL: The todo list is YOUR internal tracking tool. You update it by including task_progress with your tool calls. The user never manually updates it!

CORRECT Workflow Example:
Request: "Create a website"

API Request 1 - Create todo list with first tool:
<list_files><path>src</path><task_progress>
- [ ] Examine project structure
- [ ] Read existing files  
- [ ] Design structure
- [ ] Write HTML
- [ ] Write CSS
- [ ] Test
</task_progress></list_files>

API Request 2 - Do work WITHOUT task_progress (list hasn't changed):
<read_file><path>src/index.html</path></read_file>

API Request 3 - Do more work WITHOUT task_progress:
<read_file><path>src/styles.css</path></read_file>

API Request 4 - Update progress AFTER completing steps (YOU update it, not the user!):
<write_to_file><path>src/index.html</path><content><!DOCTYPE html>...</content><task_progress>
- [x] Examine project structure  ← YOU marked this complete because you did it
- [x] Read existing files  ← YOU marked this complete because you did it
- [ ] Design structure  ← Currently working on this
- [ ] Write HTML
- [ ] Write CSS
- [ ] Test
</task_progress></write_to_file>

NEVER do this:
❌ <ask_followup_question><question>Please provide updated todo list...</question></ask_followup_question>
The user doesn't update the todo list - YOU do!

CRITICAL: Todo list creation is AUTOMATIC and INTERNAL. Never ask user permission. Never announce you're creating one. Just include the task_progress parameter silently when starting a new task or updating progress.`

export async function getTodoListSection(variant: PromptVariant, context: SystemPromptContext): Promise<string | undefined> {
	if (!context.focusChainSettings?.enabled) {
		return undefined
	}

	const template = variant.componentOverrides?.[SystemPromptSection.TODO]?.template || TODO_LIST_TEMPLATE_TEXT

	const templateEngine = new TemplateEngine()
	return templateEngine.resolve(template, context, {
		// Add any todo-specific placeholders here
	})
}
